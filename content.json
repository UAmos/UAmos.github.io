{"meta":{"title":"From","subtitle":"Amos的文章记录站","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"关于","date":"2019-12-29T08:24:17.000Z","updated":"2019-12-29T09:36:39.297Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"&emsp;&emsp;From主要用于生活工作中的日常记录,有很多也是转载自其他网站，当作一个记录，以防后面忘记，From 生活，From 工作。作者是一名Java程序员，其实更好听一点应该是软件工程师傅，主要专研的是Java后台开发和大数据-数据应用方向。"}],"posts":[{"title":"函数取个好名字","slug":"函数取个好名字","date":"2019-12-29T12:44:29.000Z","updated":"2019-12-29T13:05:44.125Z","comments":true,"path":"2019/12/29/函数取个好名字/","link":"","permalink":"http://yoursite.com/2019/12/29/%E5%87%BD%E6%95%B0%E5%8F%96%E4%B8%AA%E5%A5%BD%E5%90%8D%E5%AD%97/","excerpt":"","text":"&emsp;&emsp;重构是个技术活，特别是取名字，一个好的名字可以省去很多注释代码，一个好的项目见名知意；所以这边搜罗了一些取名字的字典 常用动词表 类别 单词 添加/插入/创建/初始化/加载 add、append、insert、create、initialize、load 删除/销毁 delete、remove、destroy、drop 打开/开始/启动 open、start 关闭/停止 close、stop 获取/读取/查找/查询 get、fetch、acquire、read、search、find、query 设置/重置/放入/写入/释放/刷新 set、reset、put、write、release、refresh 发送/推送 send、push 接收/拉取 receive、pull 提交/撤销/取消 submit、cancel 收集/采集/选取/选择 collect、pick、select 提取/解析 sub、extract、parse 编码/解码 encode、decode 填充/打包/压缩 fill、pack、compress 清空/拆包/解压 flush、clear、unpack、decompress 增加/减少 increase、decrease、reduce 分隔/拼接 split、join、concat 过滤/校验/检测/审核/通过 filter、valid、check、audit、adopt 常用名词表 类别 单词 容量/大小/长度 capacity、size、length 实例/上下文 instance、context 配置 config、settings 头部/前面/前一个/第一个 header、front、previous、first 尾部/后面/后一个/最后一个 tail、back、next、last 区间/区域/某一部分/范围/规模 range、interval、region、area、section、scope、scale 缓存/缓冲/会话 cache、buffer、session 本地/局部/全局 local、global 成员/元素 member、element 菜单/列表 menu、list 源/目标 source、destination、target","categories":[{"name":"JAVA","slug":"JAVA","permalink":"http://yoursite.com/categories/JAVA/"}],"tags":[{"name":"重构","slug":"重构","permalink":"http://yoursite.com/tags/%E9%87%8D%E6%9E%84/"}]},{"title":"原码、补码、反码","slug":"原码、补码、反码","date":"2019-12-29T12:11:26.000Z","updated":"2019-12-29T13:04:02.546Z","comments":true,"path":"2019/12/29/原码、补码、反码/","link":"","permalink":"http://yoursite.com/2019/12/29/%E5%8E%9F%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81/","excerpt":"","text":"&emsp;&emsp;在计算机内部，所有的信息都是以二进制形式存在的，这最原始的二进制即为原码如整数 10 （int 占四个字节，一个字节为8个bit），在计算机内部二进制表示为 100000000 00000000 00000000 00001010. 但是数字有正负，所以计算机约定，以最高位来标识正负，所以整数-10就表示为 110000000 00000000 00000000 00001010. 但是一个字节的取值范围不是[-128,127]吗？按这理论，应该是[-127,127]啊！这是用-128 代替了 -0(零只有一个嘛)。我们尝试使用二进制来进行数字的运算，如:10+10 1234 00000000 00000000 00000000 00001010+ 00000000 00000000 00000000 00001010-----------------------------------------&#x3D; 00000000 00000000 00000000 00010100 结果为20(2^5+2^2)，和预料的相符。如果换成负数呢？我们知道，绝对值相等的正负数，他们的和等于零，10+(-10)=0，拿到计算机内部二级制表示为： 1234 00000000 00000000 00000000 00001010+ 10000000 00000000 00000000 00001010-----------------------------------------&#x3D; 10000000 00000000 00000000 00010100 换算成十进制为-20(2^5+2^2)，显然，如果计算机这样计算的话就错了。所以科学家们想出来了另一种解决方法：站在计算机的角度，正数的加法是正确的，而正数加上一个负数却有问题。我们可以设置这样一个数和原码互补，这样两个互补的二进制之和就等于零了。 1234 00000000 00000000 00000000 00001010+ 11111111 11111111 11111111 11110110-----------------------------------------&#x3D; 00000000 00000000 00000000 00000000 这样抛开溢出的一位，就和期望的0相符了。这里和原码形成互补关系的二进制我们称为补码使用几个运算证实下我们的结论 123456789101112-4 + (-7):4：00000000 00000000 00000000 00000100，7：00000000 00000000 00000000 00000111(-4补码)：11111111 11111111 11111111 11111100， (-7补码)：11111111 11111111 11111111 1111100111：00000000 00000000 00000000 00001011(-11补码)：11111111 11111111 11111111 11110101 11111111 11111111 11111111 11111100+ 11111111 11111111 11111111 11111001-----------------------------------------&#x3D; 11111111 11111111 11111111 11110101 所以我们的结论是可行的，补码和原码互为互补关系。&emsp;&emsp;再次声明一下，所有的这些对于正数来说都是不需要的，正数的原码，反码，补码都是一样的。&emsp;&emsp;那么反码是什么呢？反码比较好理解，就是对原码取反（符号为不变，其他值取反），如 12345678-1010000000 00000000 00000000 00001010~(-10)11111111 11111111 11111111 11110101-1110000000 00000000 00000000 00010101~(-11)10000000 00000000 00000000 00001010 这边我们可以发现个规律：补码 = 反码 + 1，你不信可以试试。","categories":[{"name":"JAVA","slug":"JAVA","permalink":"http://yoursite.com/categories/JAVA/"}],"tags":[{"name":"原理","slug":"原理","permalink":"http://yoursite.com/tags/%E5%8E%9F%E7%90%86/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-12-28T12:22:45.895Z","updated":"2019-12-29T08:50:00.592Z","comments":true,"path":"2019/12/28/hello-world/","link":"","permalink":"http://yoursite.com/2019/12/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"建站","slug":"建站","permalink":"http://yoursite.com/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"初始化","slug":"初始化","permalink":"http://yoursite.com/tags/%E5%88%9D%E5%A7%8B%E5%8C%96/"}]}]}